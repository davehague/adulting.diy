// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                     String                  @id @default(uuid())
  name                   String
  email                  String                  @unique
  picture                String?
  household              Household?              @relation(fields: [householdId], references: [id])
  householdId            String?
  isAdmin                Boolean                 @default(false)
  notificationPreferences Json                    @default("{\"task_created\":\"any\",\"task_paused\":\"any\",\"task_completed\":\"any\",\"task_deleted\":\"any\",\"occurrence_assigned\":\"mine\",\"occurrence_executed\":\"mine\",\"occurrence_skipped\":\"mine\",\"occurrence_commented\":\"mine\"}")
  lastLogin              DateTime                @default(now())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  createdTasks           TaskDefinition[]
  historyLogs            OccurrenceHistoryLog[]

  @@map("users")
}

// Household model
model Household {
  id         String       @id @default(uuid())
  name       String
  inviteCode String       @unique
  users      User[]
  categories Category[]
  tasks      TaskDefinition[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("households")
}

// Category model
model Category {
  id           String           @id @default(uuid())
  name         String
  household    Household?       @relation(fields: [householdId], references: [id])
  householdId  String?
  isDefault    Boolean          @default(false)
  tasks        TaskDefinition[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([name, householdId])
  @@map("categories")
}

// Task Definition model
model TaskDefinition {
  id                String            @id @default(uuid())
  household         Household         @relation(fields: [householdId], references: [id])
  householdId       String
  name              String
  description       String?
  instructions      String?
  category          Category          @relation(fields: [categoryId], references: [id])
  categoryId        String
  metaStatus        String            // active, paused, soft-deleted, completed
  scheduleConfig    Json
  reminderConfig    Json?
  createdBy         User              @relation(fields: [createdByUserId], references: [id])
  createdByUserId   String
  defaultAssigneeIds String[]         @default([])
  occurrences       TaskOccurrence[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("task_definitions")
}

// Task Occurrence model
model TaskOccurrence {
  id            String                @id @default(uuid())
  task          TaskDefinition        @relation(fields: [taskId], references: [id])
  taskId        String
  dueDate       DateTime
  status        String                // created, assigned, completed, skipped, deleted
  assigneeIds   String[]              @default([])
  completedAt   DateTime?
  skippedAt     DateTime?
  historyLogs   OccurrenceHistoryLog[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  @@map("task_occurrences")
}

// Occurrence History Log model
model OccurrenceHistoryLog {
  id            String          @id @default(uuid())
  occurrence    TaskOccurrence  @relation(fields: [occurrenceId], references: [id])
  occurrenceId  String
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  logType       String          // status_change, comment, assignment_change, date_change
  oldValue      String?
  newValue      String?
  comment       String?
  createdAt     DateTime        @default(now())

  @@map("occurrence_history_logs")
}
